# -*- coding: utf-8 -*-
"""moduleTest.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CC-a719AC4gr2LaXmLsER2Vb9tp1jZy9
"""

import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
import shapely
from shapely.geometry import Point, Polygon, LineString

from matplotlib.backends.backend_agg import FigureCanvasAgg
from matplotlib.figure import Figure
import numpy as np

gpd.__version__

def polygon2rgba2(geometry):
  fig = Figure(figsize=(1, 1), dpi=32)
  canvas = FigureCanvasAgg(fig)

  ax = fig.add_subplot(111)
  x, y = geometry.exterior.coords.xy
  ax.plot(x, y)
  ax.axis('off')
  canvas.draw()
  buf = canvas.buffer_rgba()

  return np.asarray(buf)

def rgba2rgb( rgba, background=(255,255,255) ):
    row, col, ch = rgba.shape
    if ch == 3:
        return rgba
    assert ch == 4, 'RGBA image has 4 channels.'
    rgb = np.zeros( (row, col, 3), dtype='float32' )
    r, g, b, a = rgba[:,:,0], rgba[:,:,1], rgba[:,:,2], rgba[:,:,3]
    a = np.asarray( a, dtype='float32' ) / 255.0
    R, G, B = background
    rgb[:,:,0] = r * a + (1.0 - a) * R
    rgb[:,:,1] = g * a + (1.0 - a) * G
    rgb[:,:,2] = b * a + (1.0 - a) * B
    return np.asarray( rgb, dtype='uint8' )

def rgb2gray(rgb):
    r, g, b = rgb[:,:,0], rgb[:,:,1], rgb[:,:,2]
    gray = 0.2989 * r + 0.5870 * g + 0.1140 * b
    return gray

def polygon2gray(geometry):
  rgba = polygon2rgba2(geometry)
  rgb = rgba2rgb(rgba)
  gray = rgb2gray(rgb)
  return gray



